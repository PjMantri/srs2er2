package tester;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import nlp.objects.Attribute;
import nlp.objects.Entity;
import nlp.objects.Model;
import nlp.objects.Relationship;
import nlp.objects.Sentence;
import nlp.objects.Sentences;
import trie.LeafNode;
import trie.Lookup;
import trie.Trie;

public class Paragraph {
	
	private Sentences Paragraph;
	private Model ParagraphDataModel;
	
	/**
	 * Reads a paragraph from the inputFile provided and loads it. POSTags the setences.
	 * @param inputFile
	 */
	public Paragraph(File inputFile) {
		this.Paragraph = new Sentences();
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(inputFile));
			//TODO Reads only one line from the file.
			String paragraph = br.readLine();
			load(paragraph);
			br.close();
		}
		catch (IOException ioe) {
			ioe.printStackTrace();
			System.err.println("Error reading test data file.");
		}
		
	}
	
	/**
	 * Loads the paragraph provided from paragraph into the list of sentences. POSTags the sentences.
	 * @param paragraph
	 */
	public Paragraph(String paragraph) {
		this.Paragraph = new Sentences();
		load(paragraph);
	}
	
	private void load(String paragraphText) {
		ArrayList<Sentence> sentences = new ArrayList<Sentence>();
		for (String sentenceValue : Arrays.asList(paragraphText.split("\\."))) {
			Sentence sent = new Sentence(sentenceValue);
			sentences.add(sent);
		}
		this.Paragraph.setSentence(sentences);
	}
	
	public void acquireDataModel(Trie trie) {
		for (Sentence sentence : this.Paragraph.getSentence()) {
			LeafNode leafInfo = Lookup.strictMatch(trie, sentence);
			if (leafInfo == null) {
				System.err.println("Lookup for -" + sentence.getValue() + " did not return any match.");
			}
			else {
				sentence.setDataModel(leafInfo.getDataModel());
			}
		}
		//createDataModel();
	}

	private void createDataModel() {
		List<Entity> entities = new LinkedList<Entity>();
		List<Relationship> relationships = new LinkedList<Relationship>();
		
		for (Sentence sentence : this.Paragraph.getSentence()) {
			entities.addAll(sentence.getDataModel().getEntities());
			relationships.addAll(sentence.getDataModel().getRelationships());
		}
		this.ParagraphDataModel = new Model();
		this.ParagraphDataModel.setEntities(entities);
		this.ParagraphDataModel.setRelationships(relationships);
		
		
		
	}
	private void mergeDuplicateEntities() {
		List<Entity> entities = this.ParagraphDataModel.getEntities();
		Integer entitiesSize = entities.size();
		for (int i = 0; i < entitiesSize; i++) {
			Entity current = entities.get(i);
			for (int j = i + 1; j < entitiesSize; j++) {
				if (current.getName().compareTo(entities.get(j).getName()) == 0) {
					/*Merge Entities*/
					Entity duplicate = entities.get(j);
					List<Attribute> original = duplicate.getAttributes();
					original.addAll(duplicate.getAttributes());
					current.setAttributes(original);
					
					entities.remove(j);
					entitiesSize = entitiesSize - 1;
					break;
				}
			}
		}
	}
	
	private boolean isPromotable(Attribute attribute) {
		Iterator<Entity> entityItr = this.ParagraphDataModel.getEntities().iterator();
		while (entityItr.hasNext()) {
			Entity entity = entityItr.next();
			if (entity.getName().compareTo(attribute.getName()) == 0) {
				return true;
			}
		}
		return false;
	}
	
	/**
	 * Converts the List of sentences into a xml format which can be read by the plugin.
	 * @return XML in string format.
	 */
	public String toErdXml() {
		//FIXME Implement this
		
		return null;
	}
	
	/**
	 * Saves the xml as generated by toErdXml to a path specified by filepath
	 * @param filepath Absolute path of file to store the file. Provide the extension of the file.
	 */
	public void saveAsXml(String filepath) {
		//FIXME Implement this
	}
	
	@Override
	public String toString() {
		return this.Paragraph.toString();
	}
}